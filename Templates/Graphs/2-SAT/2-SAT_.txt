/************************************/
vector<int> adj[ N ] ;
bool vis[ N ] ;
int tin[ N ] ;
int low[ N ] ;
int Time ;

stack<int> q ;
int id[ N ] ;
int nroC ;

void dfs( int from ) {
	vis[ from ] = true ;
	tin[ from ] = low[ from ] = Time ++ ;
	q.push( from ) ;
	for( int to : adj[ from ] ) {
		if( !tin[ to ] ) {
			dfs( to ) ;
		}
		if( vis[ to ] ) {
			low[ from ] = min( low[ from ] , low[ to ] ) ;
		}
	}
	if( tin[ from ] == low[ from ] ) {
		while( true ) {
			int v = q.top() ;
			q.pop() ;
			id[ v ] = nroC ;
			vis[ v ] = false ;
			if( from == v ) {
				break ;
			}
		}
		nroC ++ ;
	}
}

void Tarjan( int n ) {
	for( int i = 0 ; i < n ; i ++ ) {
		if( tin[ i ] ) continue ;
		dfs( i ) ;
	}
}

/************************************/
inline int toNode( int x ) {
	if( x > 0 ) return 2*( x - 1 ) ;
	return 2*( -x - 1 ) + 1 ;
}

/************************************/
bool SAT2( int n , int m ) {
	int x , y ;
	while( m -- ) {
		scanf( "%d %d" , &x , &y ) ;
		x = toNode( x ) ;
		y = toNode( y ) ;
		adj[ x^1 ].push_back( y ) ;
		adj[ y^1 ].push_back( x ) ;
	}
	Tarjan( n ) ;
	for( int x = 0 ; x < n ; x += 2 ) {
		if( id[ x ] == id[ x^1 ] ) {
			return false ;
		}
	}
	return true ;
}

/************************************/
